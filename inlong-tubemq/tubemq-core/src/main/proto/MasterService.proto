/**
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
syntax = "proto2";
option java_package = "org.apache.inlong.tubemq.corebase.protobuf.generated";
option java_outer_classname = "ClientMaster";
option java_generate_equals_and_hash = true;
option java_generic_services = true;
option optimize_for = SPEED;


message EventProto{
	optional int64 rebalanceId = 1;
    optional int32 opType = 2;
    optional int32 status = 3;
    /* consumerId@group-brokerId:host:port-topic:partitionId */
    repeated string subscribeInfo = 4;
}

message EnableBrokerFunInfo {
    required bool enableConsumeAuthenticate = 1;
    required bool enableConsumeAuthorize = 2;
    required bool enableProduceAuthenticate = 3;
    required bool enableProduceAuthorize = 4;
    optional bool enableVisitTokenCheck = 5;
}

message AuthenticateInfo {
    required string userName = 1;
    required int64 timestamp = 2;
    required int32 nonce = 3;
    required string othParams = 4;
    required string signature = 5;
}

message MasterCertificateInfo {
    optional AuthenticateInfo authInfo = 1;
    optional string authorizedToken = 2;
}

message MasterAuthorizedInfo {
    required int64 visitAuthorizedToken = 1;
    optional string authAuthorizedToken = 2;
}

message MasterBrokerAuthorizedInfo {
    required string visitAuthorizedToken = 1;
    optional string authAuthorizedToken = 2;
}

message ApprovedClientConfig {
    required int64 configId = 1;
    optional int32 maxMsgSize = 2;
}

message ClusterConfig {
    required int64 configId = 1;
    optional int32 maxMsgSize = 2;
}

message RegisterRequestP2M {
    required string clientId = 1;
    repeated string topicList = 2;
    required int64 brokerCheckSum = 3;
    required string hostName = 4;
    optional MasterCertificateInfo authInfo = 5;
    optional string jdkVersion = 6;
    optional ApprovedClientConfig appdConfig = 7;
}

message RegisterResponseM2P {
    required bool success = 1;
    required int32 errCode = 2;
    required string errMsg = 3;
    required int64 brokerCheckSum = 4;
    repeated string brokerInfos = 5;
    optional MasterAuthorizedInfo authorizedInfo = 6;
    optional ApprovedClientConfig appdConfig = 7;
}

message HeartRequestP2M {
    required string clientId = 1;
    required int64 brokerCheckSum = 2;
    required string hostName = 3;
    repeated string topicList = 4;
    optional MasterCertificateInfo authInfo = 5;
    optional ApprovedClientConfig appdConfig = 6;
}

message HeartResponseM2P {
    required bool success = 1;
    required int32 errCode = 2;
    required string errMsg = 3;
    required int64 brokerCheckSum = 4;
    /* brokerId:host:port-topic:partitionNum */
    repeated string topicInfos = 5;
    repeated string brokerInfos = 6;
    optional bool requireAuth = 7;
    optional MasterAuthorizedInfo authorizedInfo = 8;
    optional ApprovedClientConfig appdConfig = 9;
}

message CloseRequestP2M{
	required string clientId = 1;
	optional MasterCertificateInfo authInfo = 2;
}

message CloseResponseM2P{
    required bool success = 1;
    required int32 errCode = 2;
    required string errMsg = 3;
}

message RegisterRequestC2M {
    required string clientId = 1;
    required string groupName = 2;
    required string hostName = 3;
    repeated string topicList = 4;
    /* consumerId@group-brokerId:host:port-topic:partitionId */
    repeated string subscribeInfo = 5;
    repeated string  topicCondition = 6;
    optional bool requireBound = 7;
    optional int64   sessionTime = 8;
    optional string  sessionKey = 9;
    optional int32   totalCount = 10;
    optional string  requiredPartition = 11;
    optional bool notAllocated = 12;
    optional bool selectBig = 13;
    optional int64 groupFlowCheckId = 14;
    optional int64 defFlowCheckId = 15;
    optional int64 ssdStoreId = 16; /* Deprecated  */
    optional int32 qryPriorityId = 17;
    optional MasterCertificateInfo authInfo = 18;
    optional string jdkVersion = 19;
}

message RegisterResponseM2C {
    required bool success = 1;
    required int32 errCode = 2;
    required string errMsg = 3;
    /* brokerId:host:port-topic:partitionNum */
    repeated string topicInfo = 4;
    optional bool notAllocated = 5;
    optional int64 defFlowCheckId = 6;
    optional string defFlowControlInfo = 7;
    optional int64 groupFlowCheckId = 8;
    optional string groupFlowControlInfo = 9;
    optional int64 ssdStoreId = 10; /* Deprecated  */
    optional int32 qryPriorityId = 11;
    optional MasterAuthorizedInfo authorizedInfo = 12;
}

message HeartRequestC2M {
    required string clientId = 1;
    required string groupName = 2;
    repeated string subscribeInfo = 3;
    required bool reportSubscribeInfo = 4;
    optional EventProto event = 5;
    optional int64 defFlowCheckId = 6;
    optional int64 groupFlowCheckId = 7;
    optional int64 ssdStoreId = 8;  /* Deprecated  */
    optional int32 qryPriorityId = 9;
    optional MasterCertificateInfo authInfo = 10;
}

message HeartResponseM2C {
    required bool success = 1;
    required int32 errCode = 2;
    required string errMsg = 3;
    optional EventProto event =4;
    optional bool notAllocated = 5;
    optional int64 defFlowCheckId = 6;
    optional string defFlowControlInfo = 7;
    optional int64 groupFlowCheckId = 8;
    optional string groupFlowControlInfo = 9;
    optional int64 ssdStoreId = 10;   /* Deprecated  */
    optional int32 qryPriorityId = 11;
    optional bool requireAuth = 12;
    optional MasterAuthorizedInfo authorizedInfo = 13;
}

message CloseRequestC2M {
    required string clientId = 1;
    required string groupName = 2;
	optional MasterCertificateInfo authInfo = 3;
}

message CloseResponseM2C {
    required bool success = 1;
    required int32 errCode = 2;
    required string errMsg = 3;
}


message RegisterRequestB2M {
    required string clientId = 1;
    required bool brokerOnline = 2;
    required bool enableTls = 3;
    required int32 readStatusRpt = 4;
    required int32 writeStatusRpt = 5;
    required int64 curBrokerConfId = 6;
    required int32 confCheckSumId = 7;
    /* defaultPartNum:acceptPublish:acceptSubscribe:unflushThreshold:unflushInterval:deleteWhen:deletePolicy */
    required string brokerDefaultConfInfo = 8;
    /* topic:partNum:acceptPublish:acceptSubscribe:unflushThreshold:unflushInterval:deleteWhen:deletePolicy:filterStatusId:statusId:attributes */
    repeated string brokerTopicSetConfInfo = 9;
    optional int64 ssdStoreId = 10;   /* Deprecated  */
    optional int64 flowCheckId = 11;
    optional int32 qryPriorityId = 12;
    optional int32 tlsPort = 13;
    optional MasterCertificateInfo authInfo = 14;
    optional ClusterConfig clsConfig = 15;
}

message RegisterResponseM2B {
    required bool success = 1;
    required int32 errCode = 2;
    required string errMsg = 3;
    required bool stopRead = 4;
    required bool stopWrite = 5;
    required bool takeConfInfo = 6;
    optional EnableBrokerFunInfo enableBrokerInfo = 7;
    optional int64 curBrokerConfId = 8;
    optional int32 confCheckSumId = 9;
    /* defaultPartNum:acceptPublish:acceptSubscribe:unflushThreshold:unflushInterval:deleteWhen:deletePolicy */
    optional string brokerDefaultConfInfo = 10;
    /* topic:partNum:acceptPublish:acceptSubscribe:unflushThreshold:unflushInterval:deleteWhen:deletePolicy:filterStatusId:statusId:attributes */
    repeated string brokerTopicSetConfInfo = 11;
    optional int64 ssdStoreId = 12;   /* Deprecated  */
    optional int64 flowCheckId = 13;
    optional string flowControlInfo = 14;
    optional int32 qryPriorityId = 15;
    optional MasterAuthorizedInfo authorizedInfo = 16; /* Deprecated  */
    optional MasterBrokerAuthorizedInfo brokerAuthorizedInfo = 17;
    optional ClusterConfig clsConfig = 18;
}

message HeartRequestB2M {
    required string brokerId = 1;
    required bool brokerOnline = 2;
    required int32 readStatusRpt = 3;
    required int32 writeStatusRpt = 4;
    required int64 curBrokerConfId = 5;
    required int32 confCheckSumId = 6;
    required bool takeConfInfo = 7;
    required bool takeRemovedTopicInfo = 8;
    /* defaultPartNum:acceptPublish:acceptSubscribe:unflushThreshold:unflushInterval:deleteWhen:deletePolicy */
    optional string brokerDefaultConfInfo = 9;
    /* topic:partNum:acceptPublish:acceptSubscribe:unflushThreshold:unflushInterval:deleteWhen:deletePolicy:filterStatusId:statusId:attributes */
    repeated string brokerTopicSetConfInfo = 10;
    repeated string removedTopicsInfo = 11;
    optional int64 ssdStoreId = 12;  /* Deprecated  */
    optional int64 flowCheckId = 13;
    optional int32 qryPriorityId = 14;
    optional MasterCertificateInfo authInfo = 15;
    optional ClusterConfig clsConfig = 16;
}

message HeartResponseM2B {
    required bool success = 1;
    required int32 errCode = 2;
    required string errMsg = 3;
    required bool stopRead = 4;
    required bool stopWrite = 5;
    required int64 curBrokerConfId = 6;
    required int32 confCheckSumId = 7;
    required bool needReportData = 8;
    required bool takeConfInfo = 9;
    required bool takeRemoveTopicInfo = 10;
    /* defaultPartNum:acceptPublish:acceptSubscribe:unflushThreshold:unflushInterval:deleteWhen:deletePolicy */
    optional string brokerDefaultConfInfo = 11;
    /* topic:partNum:acceptPublish:acceptSubscribe:unflushThreshold:unflushInterval:deleteWhen:deletePolicy:filterStatusId:statusId:attributes */
    repeated string brokerTopicSetConfInfo = 12;
    /* topic:partNum:acceptPublish:acceptSubscribe:unflushThreshold:unflushInterval:deleteWhen:deletePolicy:filterStatusId:statusId:attributes */
    repeated string removeTopicConfInfo = 13;
    optional int64 ssdStoreId = 14; /* Deprecated  */
    optional int64 flowCheckId = 15;
    optional string flowControlInfo = 16;
    optional int32 qryPriorityId = 17;
    optional MasterAuthorizedInfo authorizedInfo = 18;   /* Deprecated  */
    optional MasterBrokerAuthorizedInfo brokerAuthorizedInfo = 19;
    optional ClusterConfig clsConfig = 20;
}

message CloseRequestB2M {
	required string brokerId = 1;
	optional MasterCertificateInfo authInfo = 2;
}

message CloseResponseM2B {
    required bool success = 1;
    required int32 errCode = 2;
    required string errMsg = 3;
}

/*************************** v2  ****************************/

message DataStorePath {
    required int32 recordId = 1;
    required bool isActive = 2;
    required bool isDefPath = 3;
    optional string dataPath = 4;
}

message TopicRmvInfo {
    required string topicName = 1;
    required int32 statusId = 2;
}

message DefaultConfigInfo {
    required int32 numTopicStores = 1;
    required int32 numPartitions = 2;
    required int32 unflushMsgCnt = 3;
    required int32 unflushInterval = 4;
    required int32 unflushDataSize = 5;
    required int32 memCacheBlockSize = 6;
    required int32 numMemCacheBlock = 7;
    required int32 bathDiskWriteUnit = 8;
    required int32 bathDiskReadUnit = 9;
    required bool acceptPublish = 10;
    required bool acceptSubscribe = 11;
    required string deletePolicy = 12;
}

message TopicConfigInfo {
    required string topicName = 1;
    optional int32 statusId = 2;
    optional int32 numTopicStores = 3;
    optional int32 numPartitions = 4;
    optional int32 unflushMsgCnt = 5;
    optional int32 unflushInterval = 6;
    optional int32 unflushDataSize = 7;
    optional int32 memCacheBlockSize = 8;
    optional int32 numMemCacheBlock = 9;
    optional bool acceptPublish = 10;
    optional bool acceptSubscribe = 11;
    optional string deletePolicy = 12;
    repeated DataStorePath dataPath = 13;
}

message BrokerConfigInfo {
    required int64 brokerConfId = 1;
    required int32 confCheckSumId = 2;
    optional DefaultConfigInfo defConfigInfo = 3;
    repeated TopicConfigInfo topicConfigInfos = 4;
    optional bool enableTls = 5;
    optional int32 tlsPort = 6;
    optional int32 webPort = 7;
}

message BrokerPolicyInfo {
    optional int64 policyId = 1;
    optional int32 qryPriorityId = 2;
    optional string policyInfo = 3;
}

message BrokerStatusInfo {
    required bool  isOnline = 1;
    required int32 readStatusRpt = 2;
    required int32 writeStatusRpt = 3;
    optional int32 lastOperateId = 4;
}

message BrokerOperateInfo {
    required int32 operateId = 1;
    // 00:normal, 01:stop read, 10:stop write, 11:stop read and write
    required int32 frcServiceStatus = 2;
    optional bool  frcRptConfig = 3;
    optional bool  enableConsumeAuthenticate = 4;
    optional bool  enableConsumeAuthorize = 5;
    optional bool  enableProduceAuthenticate = 6;
    optional bool  enableProduceAuthorize = 7;
    optional bool  enableVisitTokenCheck = 8;
    repeated TopicRmvInfo rmvTopicsInfo = 9;
}

message RegisterRequest_V2_B2M {
    required string clientId = 1;
    required BrokerStatusInfo statusRptInfo = 2;
    required BrokerConfigInfo configInfo = 3;
    required BrokerPolicyInfo policyInfo = 4;
    optional MasterCertificateInfo authInfo = 5;
}

message RegisterResponse_V2_M2B {
    required int32 errCode = 1;
    optional string errMsg = 2;
    optional BrokerConfigInfo configInfo = 3;
    optional BrokerOperateInfo operateInfo = 4;
    optional BrokerPolicyInfo policyInfo = 5;
    optional MasterBrokerAuthorizedInfo authorizedInfo = 6;
}

message HeartRequest_V2_B2M {
    required string brokerId = 1;
    required BrokerStatusInfo statusRptInfo = 2;
    required BrokerConfigInfo configInfo = 3;
    optional BrokerPolicyInfo policyInfo = 4;
    optional MasterCertificateInfo authInfo = 5;
}

message HeartResponse_V2_M2B {
    required int32 errCode = 1;
    optional string errMsg = 2;
    optional BrokerConfigInfo configInfo = 3;
    optional BrokerOperateInfo operateInfo = 4;
    optional BrokerPolicyInfo policyInfo = 5;
    optional MasterBrokerAuthorizedInfo brokerAuthorizedInfo = 6;
}

message CloseRequest_V2_B2M {
	required string brokerId = 1;
	optional MasterCertificateInfo authInfo = 2;
}

message CloseResponse_V2_M2B {
    required int32 errCode = 1;
    optional string errMsg = 2;
}

message ClientSubRepInfo {
    required int64 brokerConfigId = 1;
    required int64 topicMetaInfoId = 2;
    optional int64 lstAssignedTime = 3;
    optional bool reportSubInfo = 4;
    repeated string partSubInfo = 5;
}

message OpsTaskInfo {
    optional int64 groupFlowCheckId = 1;
    optional int64 defFlowCheckId = 2;
    optional int32 qryPriorityId = 3;
    optional int64 csmFrmMaxOffsetCtrlId = 4;
    optional bool requireAuth = 5;
    optional string defFlowControlInfo = 6;
    optional string groupFlowControlInfo = 7;
}

message RegisterRequestC2MV2 {
    required string clientId = 1;
    required string groupName = 2;
    required string hostName = 3;
    required int32 sourceCount = 4;
    required int32 nodeId = 5;
    repeated string topicList = 6;
    repeated string topicCondition = 7;
    optional ClientSubRepInfo subRepInfo = 8;
    optional OpsTaskInfo opsTaskInfo = 9;
    optional MasterCertificateInfo authInfo = 10;
    optional string jdkVersion = 11;
}

message RegisterResponseM2CV2 {
    required int32 errCode = 1;
    required string errMsg = 2;
    optional int64 brokerConfigId = 3;
    repeated string brokerConfigList = 4;
    optional OpsTaskInfo opsTaskInfo = 5;
    optional MasterAuthorizedInfo authorizedInfo = 6;
}

message HeartRequestC2MV2 {
    required string clientId = 1;
    required string groupName = 2;
    optional ClientSubRepInfo subRepInfo = 3;
    optional OpsTaskInfo opsTaskInfo = 4;
    optional MasterCertificateInfo authInfo = 5;
}

message HeartResponseM2CV2 {
    required int32 errCode = 1;
    required string errMsg = 2;
    optional int64 brokerConfigId = 3;
    repeated string brokerConfigList = 4;
    optional int64  topicMetaInfoId = 5;
    repeated string topicMetaInfoList = 6;
    optional OpsTaskInfo opsTaskInfo = 7;
    optional MasterAuthorizedInfo authorizedInfo = 8;
}

message GetPartMetaRequestC2M {
    required string clientId = 1;
    required string groupName = 2;
    required int64  brokerConfigId = 3;
    required int64  topicMetaInfoId = 4;
    optional MasterCertificateInfo authInfo = 5;
}

message GetPartMetaResponseM2C {
    required int32 errCode = 1;
    required string errMsg = 2;
    optional int64 brokerConfigId = 3;
    optional int64  topicMetaInfoId = 4;
    repeated string topicMetaInfoList = 5;
    repeated string brokerConfigList = 6;
}